plot.margin = margin(half_line, half_line, half_line, half_line),
complete = TRUE)
}
#Empty files in the destination directory
file.remove(dir(here("Stimuli/Fake Stimuli"), pattern = ".aif", full.names = TRUE))
#Copy files from source to destination
SourceNames <- dir(here("Stimuli/Fake Stimuli/Source"),  full.names = TRUE, pattern = ".aif")
file.copy(from = SourceNames,
to = here("Stimuli/Fake Stimuli"),
overwrite = TRUE)
#get the names of the files in the directory
OldNames <- dir(here("Stimuli/Fake Stimuli"),  full.names = TRUE, pattern = ".aif")
#Create the combinations of Song number and Song Type, which will become the new filenames
BirdSongs <- paste(here("Stimuli/Fake Stimuli"), "/",  #File Path
rep("Song ", 120),   #Just the word "Song" 60 times
rep(1:40, 3), "-", # The numbers 1:20 3 times in a row
rep(c("Control", "Fast", "Slow"), each = 40), #"Control" 20 times, then "Fast" 20 times, etc.
".aif", sep = "" )
#use file.rename to apply our new names
file.rename(OldNames, BirdSongs)
# Clean up our now not needed OldNames vector
rm(OldNames, SourceNames)
library(lme4)
library(plyr)
library(ggplot2)
library(afex)
library(emmeans)
library(ggthemes)
library(tidyverse)
library(kableExtra)
library(Hmisc)
library(binom)
library(Rmisc)
library(magick)
library(webshot)
library(magrittr)
library(multcomp)
library(data.table)
library(here)
theme_alan <- function(base_size = 12 , base_family = "")
{
half_line <- base_size/2
colors <- ggthemes_data$few
gray <- colors$medium["gray"]
black <- colors$dark["black"]
theme(
line = element_line(colour = "black", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white",
colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black",
size = base_size, lineheight = 0.9, hjust = 0.5, vjust = 0.5,
angle = 0, margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "grey30"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "grey20"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.title.x = element_text(margin = margin(t = half_line), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(0.4, "cm"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
legend.key = element_rect(fill = "white", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(0.4, "cm"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major = element_line(colour = "grey92"),
panel.grid.minor = element_line(colour = "grey92", size = 0.25),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "NA", colour = "NA"),
strip.text = element_text(colour = "grey10", size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line, b = half_line)),
strip.text.y = element_text(angle = 0, margin = margin(l = half_line, r = half_line)),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line * 1.2)),
plot.subtitle = element_text(size = rel(0.9), hjust = 0, vjust = 1, margin = margin(b = half_line * 0.9)),
plot.caption = element_text(size = rel(0.9), hjust = 1, vjust = 1, margin = margin(t = half_line * 0.9)),
plot.margin = margin(half_line, half_line, half_line, half_line),
complete = TRUE)
}
#Empty files in the destination directory
file.remove(dir(here("Stimuli/Fake Stimuli"), pattern = ".aif", full.names = TRUE))
#Copy files from source to destination
SourceNames <- dir(here("Stimuli/Fake Stimuli/Source"),  full.names = TRUE, pattern = ".aif")
file.copy(from = SourceNames,
to = here("Stimuli/Fake Stimuli"),
overwrite = TRUE)
#get the names of the files in the directory
OldNames <- dir(here("Stimuli/Fake Stimuli"),  full.names = TRUE, pattern = ".aif")
#Create the combinations of Song number and Song Type, which will become the new filenames
BirdSongs <- paste(here("Stimuli/Fake Stimuli"), "/",  #File Path
rep("Song ", 120),   #Just the word "Song" 60 times
rep(1:40, 3), "-", # The numbers 1:20 3 times in a row
rep(c("Control", "Fast", "Slow"), each = 40), #"Control" 20 times, then "Fast" 20 times, etc.
".aif", sep = "" )
#use file.rename to apply our new names
file.rename(OldNames, BirdSongs)
# Clean up our now not needed OldNames vector
rm(OldNames, SourceNames)
#1- Creating a vector of our color abbreviations
colors <- c("B", "W", "O", "R", "G", "Y") #Make a vector of our color abbreviations
#2- Obtaining all permutations of these colors
BirdID <- expand.grid(colors, colors) #Give us all permutations of our colors
#3- Removing permutations where both bands are the same color
BirdID <- subset(BirdID, Var1 != Var2)
BirdID$BirdID <- paste(BirdID$Var1, BirdID$Var2, sep="") #Make a column which is the combination of these colors
#clean up our colors vector
rm(colors)
#1- Creating a vector of Trial Types
TrialType <- c("Dawn", "Afternoon")
#Obtaining all permutations of BirdID and Trial Type
Participants <- expand.grid(BirdID$BirdID, TrialType)
#Renaming the columns of our "Experiments" dataframe
colnames(Participants) <- c("Bird ID", "Trial Type")
#Cleaning up now unnecessary vectors/dataframes
rm(BirdID, TrialType)
View(Participants)
Participants$BirdID[5]
Participants$BirdID[,5]
Participants$BirdID
Participants$`Bird ID`[5]
#1- Creating a vector of Trial Types
TrialType <- c("Dawn", "Afternoon")
#Obtaining all permutations of BirdID and Trial Type
Participants <- expand.grid(BirdID$BirdID, TrialType)
#1- Creating a vector of our color abbreviations
colors <- c("B", "W", "O", "R", "G", "Y") #Make a vector of our color abbreviations
#2- Obtaining all permutations of these colors
BirdID <- expand.grid(colors, colors) #Give us all permutations of our colors
#3- Removing permutations where both bands are the same color
BirdID <- subset(BirdID, Var1 != Var2)
BirdID$BirdID <- paste(BirdID$Var1, BirdID$Var2, sep="") #Make a column which is the combination of these colors
#clean up our colors vector
rm(colors)
#1- Creating a vector of Trial Types
TrialType <- c("Dawn", "Afternoon")
#Obtaining all permutations of BirdID and Trial Type
Participants <- expand.grid(BirdID$BirdID, TrialType)
#Renaming the columns of our "Experiments" dataframe
colnames(Participants) <- c("Bird ID", "Trial Type")
#Cleaning up now unnecessary vectors/dataframes
rm(BirdID, TrialType)
BirdSOngs
BirdSongs
BaseSongs <- str_replace(BirdSongs,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")
BirdSongs %>%
data.frame()
BaseSongs <- BirdSongs %>%
data.frame()
View(BaseSongs)
BaseSongs <- BirdSongs %>%
data.frame() %>%
`colnames<-`"Song"
BaseSongs <- BirdSongs %>%
data.frame() %>%
`colnames<-` "Song"
View(BaseSongs)
BaseSongs
BaseSongs <- BirdSongs %>%
data.frame() %>%
separate(., sep = "-")
BaseSongs <- BirdSongs %>%
data.frame() %>%
separate(`.`, sep = "-")
str(BaseSongs)
BaseSongs <- BirdSongs %>%
data.frame() %>%
separate(` .`, sep = "-")
BaseSongs <- BirdSongs %>%
data.frame(t())
BaseSongs <- BirdSongs %>%
enframe()
BaseSongs <- BirdSongs %>%
enframe(name = "number", value = "Song")
View(BaseSongs)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"-"))
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"-")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", ""))
BirdSongs[1]
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", ""))
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-")
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control")
BaseSongs2 <- cbind.data.frame(rep("Song", 40), 1:40, rep("Control", 40))
View(BaseSongs2)
View(BaseSongs)
# BaseSongs2 <- cbind.data.frame(c(rep("Song", 40), 1:40), rep("Control", 40))
View(BaseSongs2)
# BaseSongs2 <- cbind.data.frame(c(rep("Song", 40), 1:40), rep("Control", 40))
# colnames(BaseSongs2) <- c("Song", "Number", "Song Type")
colnames(BaseSongs2) <- c("Song", "Number", "Song Type")
BaseSongs2 <- cbind.data.frame(c(rep("Song", 40), 1:40), rep("Control", 40))
BaseSongs2 <- cbind.data.frame(cbind.data.frame(rep("Song", 40), 1:40), rep("Control", 40))
c(rep("Song", 40), 1:40)
paste(rep("Song", 40), 1:40)
BaseSongs2 <- cbind.data.frame(paste(rep("Song", 40), 1:40), rep("Control", 40))
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number)
paste(rep("Song", 40), 1:40, rep("Control", 40)
paste(rep("Song", 40), 1:40, rep("Control", 40))
paste(rep("Song", 40), 1:40, rep("Control", 40)
)
paste(rep("Song", 40), 1:40, rep("-Control", 40), sep = "")
paste(rep("Song", 40), 1:40), rep("Control", 40)
paste(rep("Song", 40), 1:40)
paste(rep("Song", 40), 1:40)
rep("Control", 40)
BaseSongs2 <- cbind.data.frame(paste(rep("Song", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
View(BaseSongs2)
BaseSongs2 <- cbind.data.frame(paste(rep("Song", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
colnames(BaseSongs2) <- c("Song", "SongNum", "SongType")
BaseSongs2 <- cbind.data.frame(paste(rep("Song", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
colnames(BaseSongs2) <- c("Song", "SongNum", "SongType")
identical(BaseSongs, BaseSongs2)
BaseSongs2 <- cbind.data.frame(paste(rep("Song ", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
colnames(BaseSongs2) <- c("Song", "SongNum", "SongType")
identical(BaseSongs, BaseSongs2)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
relevel()
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
factor()
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
factor()
# There are many other ways we could have done this- we could have simply reconstructed this list then renamed the columns:
BaseSongs2 <- cbind.data.frame(paste(rep("Song ", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
colnames(BaseSongs2) <- c("Song", "SongNum", "SongType")
factor(BaseSongs2)
identical(BaseSongs, BaseSongs2)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
mutate_all(relevel)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
mutate_all(factor())
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number
)
str(BaseSongs)
str(BaseSongs2)
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
mutate_all(factor())
BaseSongs <-
BirdSongs %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song,
"C:/Users/Alan Nielsen/Google Drive/Experiments/Dave/Song Matching Experiment/Stimuli/Fake Stimuli/",
"")) %>% #Remove the file paths from the names
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>%
mutate_all(factor)
str(BaseSongs)
identical(BaseSongs, BaseSongs2)
View(BaseSongs)
View(BaseSongs2)
identical(BaseSongs$Song, BaseSongs2$Song)
BaseSongs2 <- cbind.data.frame(paste(rep("Song ", 40), 1:40, rep("-Control", 40), sep = ""),
paste(rep("Song", 40), 1:40),
rep("Control", 40))
colnames(BaseSongs2) <- c("Song", "SongNum", "SongType")
str(BaseSongs2)
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif")
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song")
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>% #remove a useless column
mutate_all(factor) #refactor all of the columns to drop unused levels
identical(BaseSongs$Song, BaseSongs3$Song)
View(BaseSongs2)
View(BaseSongs3)
identical(arrange(BaseSongs$Song, Song), arrange(BaseSongs3$Song, Song)
)
str(BaseSongs3)
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>% #remove a useless column
mutate_all(factor) %>% #refactor all of the columns to drop unused levels
identical(BaseSongs$Song, BaseSongs3$Song) #Verify that they are identical
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>% #remove a useless column
mutate_all(factor)
identical(BaseSongs$Song, BaseSongs3$Song)
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>% #remove a useless column
mutate_all(factor) %>% #refactor all of the columns to drop unused levels
arrange(Song)
identical(BaseSongs$Song, BaseSongs3$Song) #Verify that they are identical
ChosenSongs <- sample(BaseSongs$Song, 20)
ChosenSongs
str(ChosenSongs)
ChosenSongs <- factor(sample(BaseSongs$Song, 20))
ChosenSongs
DawnSongs <- ChosenSongs[1:10]
DawnSongs <- factor(ChosenSongs[1:10])
DawnSongs <- factor(ChosenSongs[1:10])
AfternoonSongs <- factor(ChosenSongs[11:20])
SongTypes <- c("Control", "Fast", "Slow")
SongOrders <- rep(sample(SongTypes, 3), 20)
SongOrders
SongOrders <- replicate(20, sample(SongTypes, 3))
SongOrders
ChosenSongs2 <- rep(ChosenSongs, each = 3)
ChosenSongs3 <- cbind.data.frame(ChosenSongs2, SongOrders)
View(ChosenSongs3)
SongOrders <- as.vector(replicate(20, sample(SongTypes, 3)))
SongTypes <- c("Control", "Fast", "Slow")
SongOrders <- as.vector(replicate(20, sample(SongTypes, 3)))
ChosenSongs2 <- rep(ChosenSongs, each = 3)
ChosenSongs3 <- cbind.data.frame(ChosenSongs2, SongOrders)
View(BaseSongs)
ChosenSongs <- factor(sample(BaseSongs$SongNum, 20)) #Note we include factor() here to drop unused levels of the factor
#3- Create a list of all song types that is scrambled
SongTypes <- c("Control", "Fast", "Slow")
SongOrders <- as.vector(replicate(20, sample(SongTypes, 3)))
ChosenSongs2 <- rep(ChosenSongs, each = 3)
ChosenSongs3 <- cbind.data.frame(ChosenSongs2, SongOrders)
ChosenSongs3 <- cbind.data.frame(ChosenSongs2, SongOrders, rep(1:3, 20))
SongOrders <- as.vector(replicate(20, sample(c("Control", "Fast", "Slow"), 3)))
BaseSongs3 <- dir(here("Stimuli/Fake Stimuli"), pattern = ".aif") %>%
enframe(name = "number", value = "Song") %>%
mutate(Song = str_replace_all(Song, ".aif", "")) %>% # Remove the file extensions
separate(Song, into = c("SongNum", "SongType"), sep = "-", remove = FALSE) %>% #separate into components
subset(SongType == "Control") %>% #Subsetting our data so we have only Control songs (our Base Songs)
subset(select = -number) %>% #remove a useless column
mutate_all(factor)  #refactor all of the columns to drop unused levels
#2- Sample from our list of Base Songs
ChosenSongs <- factor(sample(BaseSongs$SongNum, 20)) #Note we include factor() here to drop unused levels of the factor
#3- Create a list of all song types that is scrambled
SongOrders <- as.vector(replicate(20, sample(c("Control", "Fast", "Slow"), 3)))
AllSongs <- cbind.data.frame(rep(ChosenSongs, each = 3),
as.vector(replicate(20, sample(c("Control", "Fast", "Slow"), 3))),
rep(1:3, 20))
View(AllSongs)
colnames(AllSongs) <- c("SongNum", "SongType", "SongAppearance")
DawnSongs <- factor(AllSongs[1:30])
DawnSongs <- factor(AllSongs[1:30,])
AfternoonSongs <- factor(AllSongs[31:60,])
DawnSongs <- AllSongs[1:30,]
AfternoonSongs <- AllSongs[31:60,]
View(AfternoonSongs)
View(DawnSongs)
DawnSongs <- rbind.data.frame(subset(DawnSongs, SongAppearance == 1), subset(DawnSongs, SongAppearance == 2), subset(DawnSongs, SongAppearance == 3))
DawnSongs <- rbind.data.frame(sample(subset(DawnSongs, SongAppearance == 1),10),
sample(subset(DawnSongs, SongAppearance == 2),10),
sample(subset(DawnSongs, SongAppearance == 3),10))
sample(subset(DawnSongs, SongAppearance == 1),10)
subset(DawnSongs, SongAppearance == 1)
sample(subset(DawnSongs, SongAppearance == 1),10)
